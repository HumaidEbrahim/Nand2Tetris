// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    // A 
    Mux16(a=instruction , b=outM2 , sel=instruction[15] , out=mux1 );
    And(a=instruction[15] , b=instruction[5] , out=ldA );
    Not(in=instruction[15] , out=not15 );
    Or(a=ldA , b=not15 , out=loadA );
    ARegister(in=mux1 , load=loadA , out=regA,out[0..14]=addressM );
    Mux16(a=regA , b=inM , sel=instruction[12] , out=y );
	
    //writeM?
    And(a=instruction[3] , b=instruction[15] , out=writeM);

    //write to d 
    And(a=instruction[15] , b=instruction[4] , out=writeD );
    DRegister(in=outM2 , load=writeD , out=outD );

    ALU(x=outD , y=y , zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , ny=instruction[8] , f=instruction[7] , no=instruction[6] , out=outM,out=outM2, zr=zr , ng=ng );

    //jgt
    Nand(a=true , b=zr , out=out1 );
    Nand(a=out1 , b=ng , out=out2 );
    And(a=out1 , b=out2 , out=jgt );

    //jlt
    And(a=true , b=ng , out=out3);//
    And(a=out1 , b=out3 , out=jlt);//

    //jeq
    And(a=true , b=zr , out=out4);
    And(a=out2 , b=out4 , out=jeq);

    //jge
    Or(a=jgt , b=jeq , out=jge);

    //jle
    Or(a=jlt , b=jeq , out=jle );

    //jne
    Not(in=jeq , out=jne );

    //pc
    Mux8Way16(a[0]=false , b[0]=jgt , c[0]=jeq , d[0]=jge , e[0]=jlt , f[0]=jne , g[0]=jle , h[0]=true , sel=instruction[0..2] , out[0]=jmpSel );
    And(a=jmpSel , b=instruction[15] , out=load );
    Not(in=load , out=inc );
    PC(in=regA, load=load, inc=inc, reset=reset, out[0..14]=pc);


}